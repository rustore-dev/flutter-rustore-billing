// Autogenerated from Pigeon (v4.2.10), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package ru.rustore.flutter_rustore_billing.pigeons;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/**Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Rustore {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SubscriptionPeriod {
    private @NonNull Long years;
    public @NonNull Long getYears() { return years; }
    public void setYears(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"years\" is null.");
      }
      this.years = setterArg;
    }

    private @NonNull Long months;
    public @NonNull Long getMonths() { return months; }
    public void setMonths(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"months\" is null.");
      }
      this.months = setterArg;
    }

    private @NonNull Long days;
    public @NonNull Long getDays() { return days; }
    public void setDays(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"days\" is null.");
      }
      this.days = setterArg;
    }

    /**Constructor is private to enforce null safety; use Builder. */
    private SubscriptionPeriod() {}
    public static final class Builder {
      private @Nullable Long years;
      public @NonNull Builder setYears(@NonNull Long setterArg) {
        this.years = setterArg;
        return this;
      }
      private @Nullable Long months;
      public @NonNull Builder setMonths(@NonNull Long setterArg) {
        this.months = setterArg;
        return this;
      }
      private @Nullable Long days;
      public @NonNull Builder setDays(@NonNull Long setterArg) {
        this.days = setterArg;
        return this;
      }
      public @NonNull SubscriptionPeriod build() {
        SubscriptionPeriod pigeonReturn = new SubscriptionPeriod();
        pigeonReturn.setYears(years);
        pigeonReturn.setMonths(months);
        pigeonReturn.setDays(days);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("years", years);
      toMapResult.put("months", months);
      toMapResult.put("days", days);
      return toMapResult;
    }
    static @NonNull SubscriptionPeriod fromMap(@NonNull Map<String, Object> map) {
      SubscriptionPeriod pigeonResult = new SubscriptionPeriod();
      Object years = map.get("years");
      pigeonResult.setYears((years == null) ? null : ((years instanceof Integer) ? (Integer)years : (Long)years));
      Object months = map.get("months");
      pigeonResult.setMonths((months == null) ? null : ((months instanceof Integer) ? (Integer)months : (Long)months));
      Object days = map.get("days");
      pigeonResult.setDays((days == null) ? null : ((days instanceof Integer) ? (Integer)days : (Long)days));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class Subscription {
    private @Nullable SubscriptionPeriod subscriptionPeriod;
    public @Nullable SubscriptionPeriod getSubscriptionPeriod() { return subscriptionPeriod; }
    public void setSubscriptionPeriod(@Nullable SubscriptionPeriod setterArg) {
      this.subscriptionPeriod = setterArg;
    }

    private @Nullable SubscriptionPeriod freeTrialPeriod;
    public @Nullable SubscriptionPeriod getFreeTrialPeriod() { return freeTrialPeriod; }
    public void setFreeTrialPeriod(@Nullable SubscriptionPeriod setterArg) {
      this.freeTrialPeriod = setterArg;
    }

    private @Nullable SubscriptionPeriod gracePeriod;
    public @Nullable SubscriptionPeriod getGracePeriod() { return gracePeriod; }
    public void setGracePeriod(@Nullable SubscriptionPeriod setterArg) {
      this.gracePeriod = setterArg;
    }

    private @Nullable String introductoryPrice;
    public @Nullable String getIntroductoryPrice() { return introductoryPrice; }
    public void setIntroductoryPrice(@Nullable String setterArg) {
      this.introductoryPrice = setterArg;
    }

    private @Nullable String introductoryPriceAmount;
    public @Nullable String getIntroductoryPriceAmount() { return introductoryPriceAmount; }
    public void setIntroductoryPriceAmount(@Nullable String setterArg) {
      this.introductoryPriceAmount = setterArg;
    }

    private @Nullable SubscriptionPeriod introductoryPricePeriod;
    public @Nullable SubscriptionPeriod getIntroductoryPricePeriod() { return introductoryPricePeriod; }
    public void setIntroductoryPricePeriod(@Nullable SubscriptionPeriod setterArg) {
      this.introductoryPricePeriod = setterArg;
    }

    public static final class Builder {
      private @Nullable SubscriptionPeriod subscriptionPeriod;
      public @NonNull Builder setSubscriptionPeriod(@Nullable SubscriptionPeriod setterArg) {
        this.subscriptionPeriod = setterArg;
        return this;
      }
      private @Nullable SubscriptionPeriod freeTrialPeriod;
      public @NonNull Builder setFreeTrialPeriod(@Nullable SubscriptionPeriod setterArg) {
        this.freeTrialPeriod = setterArg;
        return this;
      }
      private @Nullable SubscriptionPeriod gracePeriod;
      public @NonNull Builder setGracePeriod(@Nullable SubscriptionPeriod setterArg) {
        this.gracePeriod = setterArg;
        return this;
      }
      private @Nullable String introductoryPrice;
      public @NonNull Builder setIntroductoryPrice(@Nullable String setterArg) {
        this.introductoryPrice = setterArg;
        return this;
      }
      private @Nullable String introductoryPriceAmount;
      public @NonNull Builder setIntroductoryPriceAmount(@Nullable String setterArg) {
        this.introductoryPriceAmount = setterArg;
        return this;
      }
      private @Nullable SubscriptionPeriod introductoryPricePeriod;
      public @NonNull Builder setIntroductoryPricePeriod(@Nullable SubscriptionPeriod setterArg) {
        this.introductoryPricePeriod = setterArg;
        return this;
      }
      public @NonNull Subscription build() {
        Subscription pigeonReturn = new Subscription();
        pigeonReturn.setSubscriptionPeriod(subscriptionPeriod);
        pigeonReturn.setFreeTrialPeriod(freeTrialPeriod);
        pigeonReturn.setGracePeriod(gracePeriod);
        pigeonReturn.setIntroductoryPrice(introductoryPrice);
        pigeonReturn.setIntroductoryPriceAmount(introductoryPriceAmount);
        pigeonReturn.setIntroductoryPricePeriod(introductoryPricePeriod);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("subscriptionPeriod", (subscriptionPeriod == null) ? null : subscriptionPeriod.toMap());
      toMapResult.put("freeTrialPeriod", (freeTrialPeriod == null) ? null : freeTrialPeriod.toMap());
      toMapResult.put("gracePeriod", (gracePeriod == null) ? null : gracePeriod.toMap());
      toMapResult.put("introductoryPrice", introductoryPrice);
      toMapResult.put("introductoryPriceAmount", introductoryPriceAmount);
      toMapResult.put("introductoryPricePeriod", (introductoryPricePeriod == null) ? null : introductoryPricePeriod.toMap());
      return toMapResult;
    }
    static @NonNull Subscription fromMap(@NonNull Map<String, Object> map) {
      Subscription pigeonResult = new Subscription();
      Object subscriptionPeriod = map.get("subscriptionPeriod");
      pigeonResult.setSubscriptionPeriod((subscriptionPeriod == null) ? null : SubscriptionPeriod.fromMap((Map)subscriptionPeriod));
      Object freeTrialPeriod = map.get("freeTrialPeriod");
      pigeonResult.setFreeTrialPeriod((freeTrialPeriod == null) ? null : SubscriptionPeriod.fromMap((Map)freeTrialPeriod));
      Object gracePeriod = map.get("gracePeriod");
      pigeonResult.setGracePeriod((gracePeriod == null) ? null : SubscriptionPeriod.fromMap((Map)gracePeriod));
      Object introductoryPrice = map.get("introductoryPrice");
      pigeonResult.setIntroductoryPrice((String)introductoryPrice);
      Object introductoryPriceAmount = map.get("introductoryPriceAmount");
      pigeonResult.setIntroductoryPriceAmount((String)introductoryPriceAmount);
      Object introductoryPricePeriod = map.get("introductoryPricePeriod");
      pigeonResult.setIntroductoryPricePeriod((introductoryPricePeriod == null) ? null : SubscriptionPeriod.fromMap((Map)introductoryPricePeriod));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class Product {
    private @NonNull String productId;
    public @NonNull String getProductId() { return productId; }
    public void setProductId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"productId\" is null.");
      }
      this.productId = setterArg;
    }

    private @Nullable String productType;
    public @Nullable String getProductType() { return productType; }
    public void setProductType(@Nullable String setterArg) {
      this.productType = setterArg;
    }

    private @NonNull String productStatus;
    public @NonNull String getProductStatus() { return productStatus; }
    public void setProductStatus(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"productStatus\" is null.");
      }
      this.productStatus = setterArg;
    }

    private @Nullable String priceLabel;
    public @Nullable String getPriceLabel() { return priceLabel; }
    public void setPriceLabel(@Nullable String setterArg) {
      this.priceLabel = setterArg;
    }

    private @Nullable Long price;
    public @Nullable Long getPrice() { return price; }
    public void setPrice(@Nullable Long setterArg) {
      this.price = setterArg;
    }

    private @Nullable String currency;
    public @Nullable String getCurrency() { return currency; }
    public void setCurrency(@Nullable String setterArg) {
      this.currency = setterArg;
    }

    private @Nullable String language;
    public @Nullable String getLanguage() { return language; }
    public void setLanguage(@Nullable String setterArg) {
      this.language = setterArg;
    }

    private @Nullable String title;
    public @Nullable String getTitle() { return title; }
    public void setTitle(@Nullable String setterArg) {
      this.title = setterArg;
    }

    private @Nullable String description;
    public @Nullable String getDescription() { return description; }
    public void setDescription(@Nullable String setterArg) {
      this.description = setterArg;
    }

    private @Nullable String imageUrl;
    public @Nullable String getImageUrl() { return imageUrl; }
    public void setImageUrl(@Nullable String setterArg) {
      this.imageUrl = setterArg;
    }

    private @Nullable String promoImageUrl;
    public @Nullable String getPromoImageUrl() { return promoImageUrl; }
    public void setPromoImageUrl(@Nullable String setterArg) {
      this.promoImageUrl = setterArg;
    }

    private @Nullable Subscription subscription;
    public @Nullable Subscription getSubscription() { return subscription; }
    public void setSubscription(@Nullable Subscription setterArg) {
      this.subscription = setterArg;
    }

    /**Constructor is private to enforce null safety; use Builder. */
    private Product() {}
    public static final class Builder {
      private @Nullable String productId;
      public @NonNull Builder setProductId(@NonNull String setterArg) {
        this.productId = setterArg;
        return this;
      }
      private @Nullable String productType;
      public @NonNull Builder setProductType(@Nullable String setterArg) {
        this.productType = setterArg;
        return this;
      }
      private @Nullable String productStatus;
      public @NonNull Builder setProductStatus(@NonNull String setterArg) {
        this.productStatus = setterArg;
        return this;
      }
      private @Nullable String priceLabel;
      public @NonNull Builder setPriceLabel(@Nullable String setterArg) {
        this.priceLabel = setterArg;
        return this;
      }
      private @Nullable Long price;
      public @NonNull Builder setPrice(@Nullable Long setterArg) {
        this.price = setterArg;
        return this;
      }
      private @Nullable String currency;
      public @NonNull Builder setCurrency(@Nullable String setterArg) {
        this.currency = setterArg;
        return this;
      }
      private @Nullable String language;
      public @NonNull Builder setLanguage(@Nullable String setterArg) {
        this.language = setterArg;
        return this;
      }
      private @Nullable String title;
      public @NonNull Builder setTitle(@Nullable String setterArg) {
        this.title = setterArg;
        return this;
      }
      private @Nullable String description;
      public @NonNull Builder setDescription(@Nullable String setterArg) {
        this.description = setterArg;
        return this;
      }
      private @Nullable String imageUrl;
      public @NonNull Builder setImageUrl(@Nullable String setterArg) {
        this.imageUrl = setterArg;
        return this;
      }
      private @Nullable String promoImageUrl;
      public @NonNull Builder setPromoImageUrl(@Nullable String setterArg) {
        this.promoImageUrl = setterArg;
        return this;
      }
      private @Nullable Subscription subscription;
      public @NonNull Builder setSubscription(@Nullable Subscription setterArg) {
        this.subscription = setterArg;
        return this;
      }
      public @NonNull Product build() {
        Product pigeonReturn = new Product();
        pigeonReturn.setProductId(productId);
        pigeonReturn.setProductType(productType);
        pigeonReturn.setProductStatus(productStatus);
        pigeonReturn.setPriceLabel(priceLabel);
        pigeonReturn.setPrice(price);
        pigeonReturn.setCurrency(currency);
        pigeonReturn.setLanguage(language);
        pigeonReturn.setTitle(title);
        pigeonReturn.setDescription(description);
        pigeonReturn.setImageUrl(imageUrl);
        pigeonReturn.setPromoImageUrl(promoImageUrl);
        pigeonReturn.setSubscription(subscription);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("productId", productId);
      toMapResult.put("productType", productType);
      toMapResult.put("productStatus", productStatus);
      toMapResult.put("priceLabel", priceLabel);
      toMapResult.put("price", price);
      toMapResult.put("currency", currency);
      toMapResult.put("language", language);
      toMapResult.put("title", title);
      toMapResult.put("description", description);
      toMapResult.put("imageUrl", imageUrl);
      toMapResult.put("promoImageUrl", promoImageUrl);
      toMapResult.put("subscription", (subscription == null) ? null : subscription.toMap());
      return toMapResult;
    }
    static @NonNull Product fromMap(@NonNull Map<String, Object> map) {
      Product pigeonResult = new Product();
      Object productId = map.get("productId");
      pigeonResult.setProductId((String)productId);
      Object productType = map.get("productType");
      pigeonResult.setProductType((String)productType);
      Object productStatus = map.get("productStatus");
      pigeonResult.setProductStatus((String)productStatus);
      Object priceLabel = map.get("priceLabel");
      pigeonResult.setPriceLabel((String)priceLabel);
      Object price = map.get("price");
      pigeonResult.setPrice((price == null) ? null : ((price instanceof Integer) ? (Integer)price : (Long)price));
      Object currency = map.get("currency");
      pigeonResult.setCurrency((String)currency);
      Object language = map.get("language");
      pigeonResult.setLanguage((String)language);
      Object title = map.get("title");
      pigeonResult.setTitle((String)title);
      Object description = map.get("description");
      pigeonResult.setDescription((String)description);
      Object imageUrl = map.get("imageUrl");
      pigeonResult.setImageUrl((String)imageUrl);
      Object promoImageUrl = map.get("promoImageUrl");
      pigeonResult.setPromoImageUrl((String)promoImageUrl);
      Object subscription = map.get("subscription");
      pigeonResult.setSubscription((subscription == null) ? null : Subscription.fromMap((Map)subscription));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ProductsResponse {
    private @NonNull Long code;
    public @NonNull Long getCode() { return code; }
    public void setCode(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"code\" is null.");
      }
      this.code = setterArg;
    }

    private @Nullable String errorMessage;
    public @Nullable String getErrorMessage() { return errorMessage; }
    public void setErrorMessage(@Nullable String setterArg) {
      this.errorMessage = setterArg;
    }

    private @Nullable String errorDescription;
    public @Nullable String getErrorDescription() { return errorDescription; }
    public void setErrorDescription(@Nullable String setterArg) {
      this.errorDescription = setterArg;
    }

    private @Nullable String traceId;
    public @Nullable String getTraceId() { return traceId; }
    public void setTraceId(@Nullable String setterArg) {
      this.traceId = setterArg;
    }

    private @NonNull List<Product> products;
    public @NonNull List<Product> getProducts() { return products; }
    public void setProducts(@NonNull List<Product> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"products\" is null.");
      }
      this.products = setterArg;
    }

    private @NonNull List<DigitalShopGeneralError> errors;
    public @NonNull List<DigitalShopGeneralError> getErrors() { return errors; }
    public void setErrors(@NonNull List<DigitalShopGeneralError> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"errors\" is null.");
      }
      this.errors = setterArg;
    }

    /**Constructor is private to enforce null safety; use Builder. */
    private ProductsResponse() {}
    public static final class Builder {
      private @Nullable Long code;
      public @NonNull Builder setCode(@NonNull Long setterArg) {
        this.code = setterArg;
        return this;
      }
      private @Nullable String errorMessage;
      public @NonNull Builder setErrorMessage(@Nullable String setterArg) {
        this.errorMessage = setterArg;
        return this;
      }
      private @Nullable String errorDescription;
      public @NonNull Builder setErrorDescription(@Nullable String setterArg) {
        this.errorDescription = setterArg;
        return this;
      }
      private @Nullable String traceId;
      public @NonNull Builder setTraceId(@Nullable String setterArg) {
        this.traceId = setterArg;
        return this;
      }
      private @Nullable List<Product> products;
      public @NonNull Builder setProducts(@NonNull List<Product> setterArg) {
        this.products = setterArg;
        return this;
      }
      private @Nullable List<DigitalShopGeneralError> errors;
      public @NonNull Builder setErrors(@NonNull List<DigitalShopGeneralError> setterArg) {
        this.errors = setterArg;
        return this;
      }
      public @NonNull ProductsResponse build() {
        ProductsResponse pigeonReturn = new ProductsResponse();
        pigeonReturn.setCode(code);
        pigeonReturn.setErrorMessage(errorMessage);
        pigeonReturn.setErrorDescription(errorDescription);
        pigeonReturn.setTraceId(traceId);
        pigeonReturn.setProducts(products);
        pigeonReturn.setErrors(errors);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("code", code);
      toMapResult.put("errorMessage", errorMessage);
      toMapResult.put("errorDescription", errorDescription);
      toMapResult.put("traceId", traceId);
      toMapResult.put("products", products);
      toMapResult.put("errors", errors);
      return toMapResult;
    }
    static @NonNull ProductsResponse fromMap(@NonNull Map<String, Object> map) {
      ProductsResponse pigeonResult = new ProductsResponse();
      Object code = map.get("code");
      pigeonResult.setCode((code == null) ? null : ((code instanceof Integer) ? (Integer)code : (Long)code));
      Object errorMessage = map.get("errorMessage");
      pigeonResult.setErrorMessage((String)errorMessage);
      Object errorDescription = map.get("errorDescription");
      pigeonResult.setErrorDescription((String)errorDescription);
      Object traceId = map.get("traceId");
      pigeonResult.setTraceId((String)traceId);
      Object products = map.get("products");
      pigeonResult.setProducts((List<Product>)products);
      Object errors = map.get("errors");
      pigeonResult.setErrors((List<DigitalShopGeneralError>)errors);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class Purchase {
    private @Nullable String purchaseId;
    public @Nullable String getPurchaseId() { return purchaseId; }
    public void setPurchaseId(@Nullable String setterArg) {
      this.purchaseId = setterArg;
    }

    private @Nullable String productId;
    public @Nullable String getProductId() { return productId; }
    public void setProductId(@Nullable String setterArg) {
      this.productId = setterArg;
    }

    private @Nullable String description;
    public @Nullable String getDescription() { return description; }
    public void setDescription(@Nullable String setterArg) {
      this.description = setterArg;
    }

    private @Nullable String language;
    public @Nullable String getLanguage() { return language; }
    public void setLanguage(@Nullable String setterArg) {
      this.language = setterArg;
    }

    private @Nullable String purchaseTime;
    public @Nullable String getPurchaseTime() { return purchaseTime; }
    public void setPurchaseTime(@Nullable String setterArg) {
      this.purchaseTime = setterArg;
    }

    private @Nullable String orderId;
    public @Nullable String getOrderId() { return orderId; }
    public void setOrderId(@Nullable String setterArg) {
      this.orderId = setterArg;
    }

    private @Nullable String amountLabel;
    public @Nullable String getAmountLabel() { return amountLabel; }
    public void setAmountLabel(@Nullable String setterArg) {
      this.amountLabel = setterArg;
    }

    private @Nullable Long amount;
    public @Nullable Long getAmount() { return amount; }
    public void setAmount(@Nullable Long setterArg) {
      this.amount = setterArg;
    }

    private @Nullable String currency;
    public @Nullable String getCurrency() { return currency; }
    public void setCurrency(@Nullable String setterArg) {
      this.currency = setterArg;
    }

    private @Nullable Long quantity;
    public @Nullable Long getQuantity() { return quantity; }
    public void setQuantity(@Nullable Long setterArg) {
      this.quantity = setterArg;
    }

    private @Nullable String purchaseState;
    public @Nullable String getPurchaseState() { return purchaseState; }
    public void setPurchaseState(@Nullable String setterArg) {
      this.purchaseState = setterArg;
    }

    private @Nullable String developerPayload;
    public @Nullable String getDeveloperPayload() { return developerPayload; }
    public void setDeveloperPayload(@Nullable String setterArg) {
      this.developerPayload = setterArg;
    }

    public static final class Builder {
      private @Nullable String purchaseId;
      public @NonNull Builder setPurchaseId(@Nullable String setterArg) {
        this.purchaseId = setterArg;
        return this;
      }
      private @Nullable String productId;
      public @NonNull Builder setProductId(@Nullable String setterArg) {
        this.productId = setterArg;
        return this;
      }
      private @Nullable String description;
      public @NonNull Builder setDescription(@Nullable String setterArg) {
        this.description = setterArg;
        return this;
      }
      private @Nullable String language;
      public @NonNull Builder setLanguage(@Nullable String setterArg) {
        this.language = setterArg;
        return this;
      }
      private @Nullable String purchaseTime;
      public @NonNull Builder setPurchaseTime(@Nullable String setterArg) {
        this.purchaseTime = setterArg;
        return this;
      }
      private @Nullable String orderId;
      public @NonNull Builder setOrderId(@Nullable String setterArg) {
        this.orderId = setterArg;
        return this;
      }
      private @Nullable String amountLabel;
      public @NonNull Builder setAmountLabel(@Nullable String setterArg) {
        this.amountLabel = setterArg;
        return this;
      }
      private @Nullable Long amount;
      public @NonNull Builder setAmount(@Nullable Long setterArg) {
        this.amount = setterArg;
        return this;
      }
      private @Nullable String currency;
      public @NonNull Builder setCurrency(@Nullable String setterArg) {
        this.currency = setterArg;
        return this;
      }
      private @Nullable Long quantity;
      public @NonNull Builder setQuantity(@Nullable Long setterArg) {
        this.quantity = setterArg;
        return this;
      }
      private @Nullable String purchaseState;
      public @NonNull Builder setPurchaseState(@Nullable String setterArg) {
        this.purchaseState = setterArg;
        return this;
      }
      private @Nullable String developerPayload;
      public @NonNull Builder setDeveloperPayload(@Nullable String setterArg) {
        this.developerPayload = setterArg;
        return this;
      }
      public @NonNull Purchase build() {
        Purchase pigeonReturn = new Purchase();
        pigeonReturn.setPurchaseId(purchaseId);
        pigeonReturn.setProductId(productId);
        pigeonReturn.setDescription(description);
        pigeonReturn.setLanguage(language);
        pigeonReturn.setPurchaseTime(purchaseTime);
        pigeonReturn.setOrderId(orderId);
        pigeonReturn.setAmountLabel(amountLabel);
        pigeonReturn.setAmount(amount);
        pigeonReturn.setCurrency(currency);
        pigeonReturn.setQuantity(quantity);
        pigeonReturn.setPurchaseState(purchaseState);
        pigeonReturn.setDeveloperPayload(developerPayload);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("purchaseId", purchaseId);
      toMapResult.put("productId", productId);
      toMapResult.put("description", description);
      toMapResult.put("language", language);
      toMapResult.put("purchaseTime", purchaseTime);
      toMapResult.put("orderId", orderId);
      toMapResult.put("amountLabel", amountLabel);
      toMapResult.put("amount", amount);
      toMapResult.put("currency", currency);
      toMapResult.put("quantity", quantity);
      toMapResult.put("purchaseState", purchaseState);
      toMapResult.put("developerPayload", developerPayload);
      return toMapResult;
    }
    static @NonNull Purchase fromMap(@NonNull Map<String, Object> map) {
      Purchase pigeonResult = new Purchase();
      Object purchaseId = map.get("purchaseId");
      pigeonResult.setPurchaseId((String)purchaseId);
      Object productId = map.get("productId");
      pigeonResult.setProductId((String)productId);
      Object description = map.get("description");
      pigeonResult.setDescription((String)description);
      Object language = map.get("language");
      pigeonResult.setLanguage((String)language);
      Object purchaseTime = map.get("purchaseTime");
      pigeonResult.setPurchaseTime((String)purchaseTime);
      Object orderId = map.get("orderId");
      pigeonResult.setOrderId((String)orderId);
      Object amountLabel = map.get("amountLabel");
      pigeonResult.setAmountLabel((String)amountLabel);
      Object amount = map.get("amount");
      pigeonResult.setAmount((amount == null) ? null : ((amount instanceof Integer) ? (Integer)amount : (Long)amount));
      Object currency = map.get("currency");
      pigeonResult.setCurrency((String)currency);
      Object quantity = map.get("quantity");
      pigeonResult.setQuantity((quantity == null) ? null : ((quantity instanceof Integer) ? (Integer)quantity : (Long)quantity));
      Object purchaseState = map.get("purchaseState");
      pigeonResult.setPurchaseState((String)purchaseState);
      Object developerPayload = map.get("developerPayload");
      pigeonResult.setDeveloperPayload((String)developerPayload);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PurchasesResponse {
    private @NonNull Long code;
    public @NonNull Long getCode() { return code; }
    public void setCode(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"code\" is null.");
      }
      this.code = setterArg;
    }

    private @Nullable String errorMessage;
    public @Nullable String getErrorMessage() { return errorMessage; }
    public void setErrorMessage(@Nullable String setterArg) {
      this.errorMessage = setterArg;
    }

    private @Nullable String errorDescription;
    public @Nullable String getErrorDescription() { return errorDescription; }
    public void setErrorDescription(@Nullable String setterArg) {
      this.errorDescription = setterArg;
    }

    private @Nullable String traceId;
    public @Nullable String getTraceId() { return traceId; }
    public void setTraceId(@Nullable String setterArg) {
      this.traceId = setterArg;
    }

    private @NonNull List<Purchase> purchases;
    public @NonNull List<Purchase> getPurchases() { return purchases; }
    public void setPurchases(@NonNull List<Purchase> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"purchases\" is null.");
      }
      this.purchases = setterArg;
    }

    private @NonNull List<DigitalShopGeneralError> errors;
    public @NonNull List<DigitalShopGeneralError> getErrors() { return errors; }
    public void setErrors(@NonNull List<DigitalShopGeneralError> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"errors\" is null.");
      }
      this.errors = setterArg;
    }

    /**Constructor is private to enforce null safety; use Builder. */
    private PurchasesResponse() {}
    public static final class Builder {
      private @Nullable Long code;
      public @NonNull Builder setCode(@NonNull Long setterArg) {
        this.code = setterArg;
        return this;
      }
      private @Nullable String errorMessage;
      public @NonNull Builder setErrorMessage(@Nullable String setterArg) {
        this.errorMessage = setterArg;
        return this;
      }
      private @Nullable String errorDescription;
      public @NonNull Builder setErrorDescription(@Nullable String setterArg) {
        this.errorDescription = setterArg;
        return this;
      }
      private @Nullable String traceId;
      public @NonNull Builder setTraceId(@Nullable String setterArg) {
        this.traceId = setterArg;
        return this;
      }
      private @Nullable List<Purchase> purchases;
      public @NonNull Builder setPurchases(@NonNull List<Purchase> setterArg) {
        this.purchases = setterArg;
        return this;
      }
      private @Nullable List<DigitalShopGeneralError> errors;
      public @NonNull Builder setErrors(@NonNull List<DigitalShopGeneralError> setterArg) {
        this.errors = setterArg;
        return this;
      }
      public @NonNull PurchasesResponse build() {
        PurchasesResponse pigeonReturn = new PurchasesResponse();
        pigeonReturn.setCode(code);
        pigeonReturn.setErrorMessage(errorMessage);
        pigeonReturn.setErrorDescription(errorDescription);
        pigeonReturn.setTraceId(traceId);
        pigeonReturn.setPurchases(purchases);
        pigeonReturn.setErrors(errors);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("code", code);
      toMapResult.put("errorMessage", errorMessage);
      toMapResult.put("errorDescription", errorDescription);
      toMapResult.put("traceId", traceId);
      toMapResult.put("purchases", purchases);
      toMapResult.put("errors", errors);
      return toMapResult;
    }
    static @NonNull PurchasesResponse fromMap(@NonNull Map<String, Object> map) {
      PurchasesResponse pigeonResult = new PurchasesResponse();
      Object code = map.get("code");
      pigeonResult.setCode((code == null) ? null : ((code instanceof Integer) ? (Integer)code : (Long)code));
      Object errorMessage = map.get("errorMessage");
      pigeonResult.setErrorMessage((String)errorMessage);
      Object errorDescription = map.get("errorDescription");
      pigeonResult.setErrorDescription((String)errorDescription);
      Object traceId = map.get("traceId");
      pigeonResult.setTraceId((String)traceId);
      Object purchases = map.get("purchases");
      pigeonResult.setPurchases((List<Purchase>)purchases);
      Object errors = map.get("errors");
      pigeonResult.setErrors((List<DigitalShopGeneralError>)errors);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ConfirmPurchaseResponse {
    private @NonNull Long code;
    public @NonNull Long getCode() { return code; }
    public void setCode(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"code\" is null.");
      }
      this.code = setterArg;
    }

    private @Nullable String errorMessage;
    public @Nullable String getErrorMessage() { return errorMessage; }
    public void setErrorMessage(@Nullable String setterArg) {
      this.errorMessage = setterArg;
    }

    private @Nullable String errorDescription;
    public @Nullable String getErrorDescription() { return errorDescription; }
    public void setErrorDescription(@Nullable String setterArg) {
      this.errorDescription = setterArg;
    }

    private @Nullable String traceId;
    public @Nullable String getTraceId() { return traceId; }
    public void setTraceId(@Nullable String setterArg) {
      this.traceId = setterArg;
    }

    private @NonNull List<DigitalShopGeneralError> errors;
    public @NonNull List<DigitalShopGeneralError> getErrors() { return errors; }
    public void setErrors(@NonNull List<DigitalShopGeneralError> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"errors\" is null.");
      }
      this.errors = setterArg;
    }

    /**Constructor is private to enforce null safety; use Builder. */
    private ConfirmPurchaseResponse() {}
    public static final class Builder {
      private @Nullable Long code;
      public @NonNull Builder setCode(@NonNull Long setterArg) {
        this.code = setterArg;
        return this;
      }
      private @Nullable String errorMessage;
      public @NonNull Builder setErrorMessage(@Nullable String setterArg) {
        this.errorMessage = setterArg;
        return this;
      }
      private @Nullable String errorDescription;
      public @NonNull Builder setErrorDescription(@Nullable String setterArg) {
        this.errorDescription = setterArg;
        return this;
      }
      private @Nullable String traceId;
      public @NonNull Builder setTraceId(@Nullable String setterArg) {
        this.traceId = setterArg;
        return this;
      }
      private @Nullable List<DigitalShopGeneralError> errors;
      public @NonNull Builder setErrors(@NonNull List<DigitalShopGeneralError> setterArg) {
        this.errors = setterArg;
        return this;
      }
      public @NonNull ConfirmPurchaseResponse build() {
        ConfirmPurchaseResponse pigeonReturn = new ConfirmPurchaseResponse();
        pigeonReturn.setCode(code);
        pigeonReturn.setErrorMessage(errorMessage);
        pigeonReturn.setErrorDescription(errorDescription);
        pigeonReturn.setTraceId(traceId);
        pigeonReturn.setErrors(errors);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("code", code);
      toMapResult.put("errorMessage", errorMessage);
      toMapResult.put("errorDescription", errorDescription);
      toMapResult.put("traceId", traceId);
      toMapResult.put("errors", errors);
      return toMapResult;
    }
    static @NonNull ConfirmPurchaseResponse fromMap(@NonNull Map<String, Object> map) {
      ConfirmPurchaseResponse pigeonResult = new ConfirmPurchaseResponse();
      Object code = map.get("code");
      pigeonResult.setCode((code == null) ? null : ((code instanceof Integer) ? (Integer)code : (Long)code));
      Object errorMessage = map.get("errorMessage");
      pigeonResult.setErrorMessage((String)errorMessage);
      Object errorDescription = map.get("errorDescription");
      pigeonResult.setErrorDescription((String)errorDescription);
      Object traceId = map.get("traceId");
      pigeonResult.setTraceId((String)traceId);
      Object errors = map.get("errors");
      pigeonResult.setErrors((List<DigitalShopGeneralError>)errors);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PaymentResult {
    private @Nullable SuccessInvoice successInvoice;
    public @Nullable SuccessInvoice getSuccessInvoice() { return successInvoice; }
    public void setSuccessInvoice(@Nullable SuccessInvoice setterArg) {
      this.successInvoice = setterArg;
    }

    private @Nullable InvalidInvoice invalidInvoice;
    public @Nullable InvalidInvoice getInvalidInvoice() { return invalidInvoice; }
    public void setInvalidInvoice(@Nullable InvalidInvoice setterArg) {
      this.invalidInvoice = setterArg;
    }

    private @Nullable SuccessPurchase successPurchase;
    public @Nullable SuccessPurchase getSuccessPurchase() { return successPurchase; }
    public void setSuccessPurchase(@Nullable SuccessPurchase setterArg) {
      this.successPurchase = setterArg;
    }

    private @Nullable InvalidPurchase invalidPurchase;
    public @Nullable InvalidPurchase getInvalidPurchase() { return invalidPurchase; }
    public void setInvalidPurchase(@Nullable InvalidPurchase setterArg) {
      this.invalidPurchase = setterArg;
    }

    public static final class Builder {
      private @Nullable SuccessInvoice successInvoice;
      public @NonNull Builder setSuccessInvoice(@Nullable SuccessInvoice setterArg) {
        this.successInvoice = setterArg;
        return this;
      }
      private @Nullable InvalidInvoice invalidInvoice;
      public @NonNull Builder setInvalidInvoice(@Nullable InvalidInvoice setterArg) {
        this.invalidInvoice = setterArg;
        return this;
      }
      private @Nullable SuccessPurchase successPurchase;
      public @NonNull Builder setSuccessPurchase(@Nullable SuccessPurchase setterArg) {
        this.successPurchase = setterArg;
        return this;
      }
      private @Nullable InvalidPurchase invalidPurchase;
      public @NonNull Builder setInvalidPurchase(@Nullable InvalidPurchase setterArg) {
        this.invalidPurchase = setterArg;
        return this;
      }
      public @NonNull PaymentResult build() {
        PaymentResult pigeonReturn = new PaymentResult();
        pigeonReturn.setSuccessInvoice(successInvoice);
        pigeonReturn.setInvalidInvoice(invalidInvoice);
        pigeonReturn.setSuccessPurchase(successPurchase);
        pigeonReturn.setInvalidPurchase(invalidPurchase);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("successInvoice", (successInvoice == null) ? null : successInvoice.toMap());
      toMapResult.put("invalidInvoice", (invalidInvoice == null) ? null : invalidInvoice.toMap());
      toMapResult.put("successPurchase", (successPurchase == null) ? null : successPurchase.toMap());
      toMapResult.put("invalidPurchase", (invalidPurchase == null) ? null : invalidPurchase.toMap());
      return toMapResult;
    }
    static @NonNull PaymentResult fromMap(@NonNull Map<String, Object> map) {
      PaymentResult pigeonResult = new PaymentResult();
      Object successInvoice = map.get("successInvoice");
      pigeonResult.setSuccessInvoice((successInvoice == null) ? null : SuccessInvoice.fromMap((Map)successInvoice));
      Object invalidInvoice = map.get("invalidInvoice");
      pigeonResult.setInvalidInvoice((invalidInvoice == null) ? null : InvalidInvoice.fromMap((Map)invalidInvoice));
      Object successPurchase = map.get("successPurchase");
      pigeonResult.setSuccessPurchase((successPurchase == null) ? null : SuccessPurchase.fromMap((Map)successPurchase));
      Object invalidPurchase = map.get("invalidPurchase");
      pigeonResult.setInvalidPurchase((invalidPurchase == null) ? null : InvalidPurchase.fromMap((Map)invalidPurchase));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SuccessInvoice {
    private @NonNull String invoiceId;
    public @NonNull String getInvoiceId() { return invoiceId; }
    public void setInvoiceId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"invoiceId\" is null.");
      }
      this.invoiceId = setterArg;
    }

    private @NonNull String finishCode;
    public @NonNull String getFinishCode() { return finishCode; }
    public void setFinishCode(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"finishCode\" is null.");
      }
      this.finishCode = setterArg;
    }

    /**Constructor is private to enforce null safety; use Builder. */
    private SuccessInvoice() {}
    public static final class Builder {
      private @Nullable String invoiceId;
      public @NonNull Builder setInvoiceId(@NonNull String setterArg) {
        this.invoiceId = setterArg;
        return this;
      }
      private @Nullable String finishCode;
      public @NonNull Builder setFinishCode(@NonNull String setterArg) {
        this.finishCode = setterArg;
        return this;
      }
      public @NonNull SuccessInvoice build() {
        SuccessInvoice pigeonReturn = new SuccessInvoice();
        pigeonReturn.setInvoiceId(invoiceId);
        pigeonReturn.setFinishCode(finishCode);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("invoiceId", invoiceId);
      toMapResult.put("finishCode", finishCode);
      return toMapResult;
    }
    static @NonNull SuccessInvoice fromMap(@NonNull Map<String, Object> map) {
      SuccessInvoice pigeonResult = new SuccessInvoice();
      Object invoiceId = map.get("invoiceId");
      pigeonResult.setInvoiceId((String)invoiceId);
      Object finishCode = map.get("finishCode");
      pigeonResult.setFinishCode((String)finishCode);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class InvalidInvoice {
    private @Nullable String invoiceId;
    public @Nullable String getInvoiceId() { return invoiceId; }
    public void setInvoiceId(@Nullable String setterArg) {
      this.invoiceId = setterArg;
    }

    public static final class Builder {
      private @Nullable String invoiceId;
      public @NonNull Builder setInvoiceId(@Nullable String setterArg) {
        this.invoiceId = setterArg;
        return this;
      }
      public @NonNull InvalidInvoice build() {
        InvalidInvoice pigeonReturn = new InvalidInvoice();
        pigeonReturn.setInvoiceId(invoiceId);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("invoiceId", invoiceId);
      return toMapResult;
    }
    static @NonNull InvalidInvoice fromMap(@NonNull Map<String, Object> map) {
      InvalidInvoice pigeonResult = new InvalidInvoice();
      Object invoiceId = map.get("invoiceId");
      pigeonResult.setInvoiceId((String)invoiceId);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SuccessPurchase {
    private @NonNull String finishCode;
    public @NonNull String getFinishCode() { return finishCode; }
    public void setFinishCode(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"finishCode\" is null.");
      }
      this.finishCode = setterArg;
    }

    private @Nullable String orderId;
    public @Nullable String getOrderId() { return orderId; }
    public void setOrderId(@Nullable String setterArg) {
      this.orderId = setterArg;
    }

    private @NonNull String purchaseId;
    public @NonNull String getPurchaseId() { return purchaseId; }
    public void setPurchaseId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"purchaseId\" is null.");
      }
      this.purchaseId = setterArg;
    }

    private @NonNull String productId;
    public @NonNull String getProductId() { return productId; }
    public void setProductId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"productId\" is null.");
      }
      this.productId = setterArg;
    }

    /**Constructor is private to enforce null safety; use Builder. */
    private SuccessPurchase() {}
    public static final class Builder {
      private @Nullable String finishCode;
      public @NonNull Builder setFinishCode(@NonNull String setterArg) {
        this.finishCode = setterArg;
        return this;
      }
      private @Nullable String orderId;
      public @NonNull Builder setOrderId(@Nullable String setterArg) {
        this.orderId = setterArg;
        return this;
      }
      private @Nullable String purchaseId;
      public @NonNull Builder setPurchaseId(@NonNull String setterArg) {
        this.purchaseId = setterArg;
        return this;
      }
      private @Nullable String productId;
      public @NonNull Builder setProductId(@NonNull String setterArg) {
        this.productId = setterArg;
        return this;
      }
      public @NonNull SuccessPurchase build() {
        SuccessPurchase pigeonReturn = new SuccessPurchase();
        pigeonReturn.setFinishCode(finishCode);
        pigeonReturn.setOrderId(orderId);
        pigeonReturn.setPurchaseId(purchaseId);
        pigeonReturn.setProductId(productId);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("finishCode", finishCode);
      toMapResult.put("orderId", orderId);
      toMapResult.put("purchaseId", purchaseId);
      toMapResult.put("productId", productId);
      return toMapResult;
    }
    static @NonNull SuccessPurchase fromMap(@NonNull Map<String, Object> map) {
      SuccessPurchase pigeonResult = new SuccessPurchase();
      Object finishCode = map.get("finishCode");
      pigeonResult.setFinishCode((String)finishCode);
      Object orderId = map.get("orderId");
      pigeonResult.setOrderId((String)orderId);
      Object purchaseId = map.get("purchaseId");
      pigeonResult.setPurchaseId((String)purchaseId);
      Object productId = map.get("productId");
      pigeonResult.setProductId((String)productId);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class InvalidPurchase {
    private @Nullable String purchaseId;
    public @Nullable String getPurchaseId() { return purchaseId; }
    public void setPurchaseId(@Nullable String setterArg) {
      this.purchaseId = setterArg;
    }

    private @Nullable String invoiceId;
    public @Nullable String getInvoiceId() { return invoiceId; }
    public void setInvoiceId(@Nullable String setterArg) {
      this.invoiceId = setterArg;
    }

    private @Nullable String orderId;
    public @Nullable String getOrderId() { return orderId; }
    public void setOrderId(@Nullable String setterArg) {
      this.orderId = setterArg;
    }

    private @Nullable Long quantity;
    public @Nullable Long getQuantity() { return quantity; }
    public void setQuantity(@Nullable Long setterArg) {
      this.quantity = setterArg;
    }

    private @Nullable String productId;
    public @Nullable String getProductId() { return productId; }
    public void setProductId(@Nullable String setterArg) {
      this.productId = setterArg;
    }

    private @Nullable Long errorCode;
    public @Nullable Long getErrorCode() { return errorCode; }
    public void setErrorCode(@Nullable Long setterArg) {
      this.errorCode = setterArg;
    }

    public static final class Builder {
      private @Nullable String purchaseId;
      public @NonNull Builder setPurchaseId(@Nullable String setterArg) {
        this.purchaseId = setterArg;
        return this;
      }
      private @Nullable String invoiceId;
      public @NonNull Builder setInvoiceId(@Nullable String setterArg) {
        this.invoiceId = setterArg;
        return this;
      }
      private @Nullable String orderId;
      public @NonNull Builder setOrderId(@Nullable String setterArg) {
        this.orderId = setterArg;
        return this;
      }
      private @Nullable Long quantity;
      public @NonNull Builder setQuantity(@Nullable Long setterArg) {
        this.quantity = setterArg;
        return this;
      }
      private @Nullable String productId;
      public @NonNull Builder setProductId(@Nullable String setterArg) {
        this.productId = setterArg;
        return this;
      }
      private @Nullable Long errorCode;
      public @NonNull Builder setErrorCode(@Nullable Long setterArg) {
        this.errorCode = setterArg;
        return this;
      }
      public @NonNull InvalidPurchase build() {
        InvalidPurchase pigeonReturn = new InvalidPurchase();
        pigeonReturn.setPurchaseId(purchaseId);
        pigeonReturn.setInvoiceId(invoiceId);
        pigeonReturn.setOrderId(orderId);
        pigeonReturn.setQuantity(quantity);
        pigeonReturn.setProductId(productId);
        pigeonReturn.setErrorCode(errorCode);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("purchaseId", purchaseId);
      toMapResult.put("invoiceId", invoiceId);
      toMapResult.put("orderId", orderId);
      toMapResult.put("quantity", quantity);
      toMapResult.put("productId", productId);
      toMapResult.put("errorCode", errorCode);
      return toMapResult;
    }
    static @NonNull InvalidPurchase fromMap(@NonNull Map<String, Object> map) {
      InvalidPurchase pigeonResult = new InvalidPurchase();
      Object purchaseId = map.get("purchaseId");
      pigeonResult.setPurchaseId((String)purchaseId);
      Object invoiceId = map.get("invoiceId");
      pigeonResult.setInvoiceId((String)invoiceId);
      Object orderId = map.get("orderId");
      pigeonResult.setOrderId((String)orderId);
      Object quantity = map.get("quantity");
      pigeonResult.setQuantity((quantity == null) ? null : ((quantity instanceof Integer) ? (Integer)quantity : (Long)quantity));
      Object productId = map.get("productId");
      pigeonResult.setProductId((String)productId);
      Object errorCode = map.get("errorCode");
      pigeonResult.setErrorCode((errorCode == null) ? null : ((errorCode instanceof Integer) ? (Integer)errorCode : (Long)errorCode));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class DigitalShopGeneralError {
    private @Nullable String name;
    public @Nullable String getName() { return name; }
    public void setName(@Nullable String setterArg) {
      this.name = setterArg;
    }

    private @Nullable Long code;
    public @Nullable Long getCode() { return code; }
    public void setCode(@Nullable Long setterArg) {
      this.code = setterArg;
    }

    private @Nullable String description;
    public @Nullable String getDescription() { return description; }
    public void setDescription(@Nullable String setterArg) {
      this.description = setterArg;
    }

    public static final class Builder {
      private @Nullable String name;
      public @NonNull Builder setName(@Nullable String setterArg) {
        this.name = setterArg;
        return this;
      }
      private @Nullable Long code;
      public @NonNull Builder setCode(@Nullable Long setterArg) {
        this.code = setterArg;
        return this;
      }
      private @Nullable String description;
      public @NonNull Builder setDescription(@Nullable String setterArg) {
        this.description = setterArg;
        return this;
      }
      public @NonNull DigitalShopGeneralError build() {
        DigitalShopGeneralError pigeonReturn = new DigitalShopGeneralError();
        pigeonReturn.setName(name);
        pigeonReturn.setCode(code);
        pigeonReturn.setDescription(description);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("name", name);
      toMapResult.put("code", code);
      toMapResult.put("description", description);
      return toMapResult;
    }
    static @NonNull DigitalShopGeneralError fromMap(@NonNull Map<String, Object> map) {
      DigitalShopGeneralError pigeonResult = new DigitalShopGeneralError();
      Object name = map.get("name");
      pigeonResult.setName((String)name);
      Object code = map.get("code");
      pigeonResult.setCode((code == null) ? null : ((code instanceof Integer) ? (Integer)code : (Long)code));
      Object description = map.get("description");
      pigeonResult.setDescription((String)description);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class ClientCodec extends StandardMessageCodec {
    public static final ClientCodec INSTANCE = new ClientCodec();
    private ClientCodec() {}
    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return ConfirmPurchaseResponse.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return DigitalShopGeneralError.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return InvalidInvoice.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)131:         
          return InvalidPurchase.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)132:         
          return PaymentResult.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)133:         
          return Product.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)134:         
          return ProductsResponse.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)135:         
          return Purchase.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)136:         
          return PurchasesResponse.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)137:         
          return Subscription.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)138:         
          return SubscriptionPeriod.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)139:         
          return SuccessInvoice.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)140:         
          return SuccessPurchase.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value)     {
      if (value instanceof ConfirmPurchaseResponse) {
        stream.write(128);
        writeValue(stream, ((ConfirmPurchaseResponse) value).toMap());
      } else 
      if (value instanceof DigitalShopGeneralError) {
        stream.write(129);
        writeValue(stream, ((DigitalShopGeneralError) value).toMap());
      } else 
      if (value instanceof InvalidInvoice) {
        stream.write(130);
        writeValue(stream, ((InvalidInvoice) value).toMap());
      } else 
      if (value instanceof InvalidPurchase) {
        stream.write(131);
        writeValue(stream, ((InvalidPurchase) value).toMap());
      } else 
      if (value instanceof PaymentResult) {
        stream.write(132);
        writeValue(stream, ((PaymentResult) value).toMap());
      } else 
      if (value instanceof Product) {
        stream.write(133);
        writeValue(stream, ((Product) value).toMap());
      } else 
      if (value instanceof ProductsResponse) {
        stream.write(134);
        writeValue(stream, ((ProductsResponse) value).toMap());
      } else 
      if (value instanceof Purchase) {
        stream.write(135);
        writeValue(stream, ((Purchase) value).toMap());
      } else 
      if (value instanceof PurchasesResponse) {
        stream.write(136);
        writeValue(stream, ((PurchasesResponse) value).toMap());
      } else 
      if (value instanceof Subscription) {
        stream.write(137);
        writeValue(stream, ((Subscription) value).toMap());
      } else 
      if (value instanceof SubscriptionPeriod) {
        stream.write(138);
        writeValue(stream, ((SubscriptionPeriod) value).toMap());
      } else 
      if (value instanceof SuccessInvoice) {
        stream.write(139);
        writeValue(stream, ((SuccessInvoice) value).toMap());
      } else 
      if (value instanceof SuccessPurchase) {
        stream.write(140);
        writeValue(stream, ((SuccessPurchase) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface Client {
    void initialize(@NonNull String id, @NonNull String prefix, Result<String> result);
    void available(Result<Boolean> result);
    void products(@NonNull List<String> ids, Result<ProductsResponse> result);
    void purchases(Result<PurchasesResponse> result);
    void purchase(@NonNull String id, Result<PaymentResult> result);
    void confirm(@NonNull String id, Result<ConfirmPurchaseResponse> result);

    /** The codec used by Client. */
    static MessageCodec<Object> getCodec() {
      return       ClientCodec.INSTANCE;    }
    /**Sets up an instance of `Client` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, Client api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.Client.initialize", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              String idArg = (String)args.get(0);
              if (idArg == null) {
                throw new NullPointerException("idArg unexpectedly null.");
              }
              String prefixArg = (String)args.get(1);
              if (prefixArg == null) {
                throw new NullPointerException("prefixArg unexpectedly null.");
              }
              Result<String> resultCallback = new Result<String>() {
                public void success(String result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.initialize(idArg, prefixArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.Client.available", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<Boolean> resultCallback = new Result<Boolean>() {
                public void success(Boolean result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.available(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.Client.products", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              List<String> idsArg = (List<String>)args.get(0);
              if (idsArg == null) {
                throw new NullPointerException("idsArg unexpectedly null.");
              }
              Result<ProductsResponse> resultCallback = new Result<ProductsResponse>() {
                public void success(ProductsResponse result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.products(idsArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.Client.purchases", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<PurchasesResponse> resultCallback = new Result<PurchasesResponse>() {
                public void success(PurchasesResponse result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.purchases(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.Client.purchase", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              String idArg = (String)args.get(0);
              if (idArg == null) {
                throw new NullPointerException("idArg unexpectedly null.");
              }
              Result<PaymentResult> resultCallback = new Result<PaymentResult>() {
                public void success(PaymentResult result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.purchase(idArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.Client.confirm", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              String idArg = (String)args.get(0);
              if (idArg == null) {
                throw new NullPointerException("idArg unexpectedly null.");
              }
              Result<ConfirmPurchaseResponse> resultCallback = new Result<ConfirmPurchaseResponse>() {
                public void success(ConfirmPurchaseResponse result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.confirm(idArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  @NonNull private static Map<String, Object> wrapError(@NonNull Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
